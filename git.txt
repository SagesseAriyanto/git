# Git - Version Control System

## What is Git?
Git is a version control system that tracks changes in your files over time. Think of it as a "save game" system for your code.

## Key Concepts

**Repository (Repo)**: A folder that Git is tracking. Contains all your project files and their history.

**Commit**: A snapshot of your project at a specific point in time. Like saving your progress in a game.

**Branch**: A separate line of development. You can work on features without affecting the main code.

**Merge**: Combining changes from different branches back together.

**Remote**: A version of your repository stored online (like GitHub).

## Basic Commands

```bash
git init                # Start tracking a folder
git status              # Show which files are changed/new/deleted
git diff file.txt       # See exactly what changed in your files
git add .               # Tell Git "I want to save these changes"
git add file.txt        # Tell Git "I want to save changes to this specific file"
git commit -m "text"    # Actually save the changes with a message
git checkout            # Switch branches or restore files
git push                # Upload to remote repository
git pull                # Download latest changes
git log                 # See commit history
```

## Why Use Git?
- **Backup**: Your code is safe with complete history
- **Collaboration**: Multiple people can work on the same project
- **Experimentation**: Try new features without breaking working code
- **History**: See exactly what changed and when
- **Rollback**: Go back to any previous version if something breaks

## Simple Workflow
1. Make changes to your files
2. `git status` (see what files you changed)
3. `git diff` (see exactly what changed)
4. `git add .` (tell Git "I want to save all these changes")
5. `git commit -m "describe what you changed"` (actually save the snapshot)
6. `git push` (backup to remote)

## Git Diff - See Your Changes
`git diff` shows you exactly what you changed in your files:

```bash
git diff                    # See all unstaged changes
git diff main.py           # See changes in specific file
git diff --staged          # See changes you've already added
```

**Example output:**
```
- old line of code
+ new line of code
```
Red lines (with -) = what you removed
Green lines (with +) = what you added

## Git Checkout - Switch or Restore
`git checkout` can do two main things:

**1. Restore files (undo changes):**
```bash
git checkout main.py       # Throw away changes in main.py, restore from last commit
git checkout .             # Restore ALL files to last commit
```

**2. Switch branches:**
```bash
git checkout main          # Switch to main branch
git checkout feature-login # Switch to feature-login branch
git checkout -b new-branch # Create and switch to new branch
```

**Warning**: `git checkout file.txt` will DELETE your unsaved changes!

Git helps you never lose work and makes teamwork possible!

## Git Add Examples

**Scenario**: You changed 3 files: `main.py`, `style.css`, and `README.md`

**Option 1: Add all files**
```bash
git add .              # Puts ALL 3 changed files in your "cart"
git commit -m "Fixed bugs and updated docs"
```

**Option 2: Add specific files**
```bash
git add main.py        # Only puts main.py in your "cart"
git commit -m "Fixed login bug"

git add style.css README.md    # Puts the other 2 files in your "cart"  
git commit -m "Updated styling and docs"
```

**Think of it like a shopping cart:**
- **Working Directory**: Your files with changes (items in the store)
- **git add**: Put items in your cart
- **git commit**: Purchase the items (save permanently)

**Important**: `git add` doesn't change your files! It just selects which changes to include in your next commit.

## Removing from Staging Area (Cart)
Sometimes you add files to your "cart" but change your mind before committing:

```bash
git reset HEAD filename.txt    # Remove specific file from cart
git reset HEAD .               # Remove ALL files from cart
git reset                      # Same as above (shortcut)
```

**Example scenario:**
```bash
git add .                      # Oops! Added everything including secrets.txt
git status                     # Shows secrets.txt is staged (green)
git reset HEAD secrets.txt     # Remove secrets.txt from cart
git status                     # Now secrets.txt is unstaged (red)
```

**What happens:**
- Files go back to "modified" status (red in git status)
- Your changes are NOT deleted - they're still in your files
- You can now add only the files you actually want

**Remember:** `git reset HEAD` only unstages files - it doesn't delete your work!